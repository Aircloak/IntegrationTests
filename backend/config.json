{
  "email_to": "everyone-dev@aircloak.com",
  "email_from": "everyone-dev@aircloak.com",
  "email_server": "localhost",
  "email_port": 25,
  "tests": {
    "teambank": [
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT EXTRACT_MATCHES(verwendungszweck, '\\w+') as word, count(*) FROM umsatz GROUP BY word HAVING count(*) > 1000 ORDER BY count(*) DESC",
        "timeout": 30,
        "expects": [["Ec", 1621]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT left(cast(buchungsDatum as text), 7) as month, extract_match(buchungstext, 'EC|Visa|Maestro|Master') as card, count(*) FROM umsatz GROUP BY month, card HAVING count(*) > 1024",
        "timeout": 30,
        "expects": [["2016-03", null, 1025]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT institution, bucket(income by 200 align middle) as income_class, count(*) FROM (SELECT inhaberId, institution, median(monthly_income) as income FROM (SELECT umsatz.inhaberId, left(cast(buchungsDatum as text), 7) as year_month, left(bic, 4) as institution, sum(betrag) as monthly_income FROM umsatz INNER JOIN bankzugang ON umsatz.inhaberId = bankzugang.inhaberId WHERE betrag >= 0 and betrag < 1000000000 GROUP BY umsatz.inhaberId, year_month, institution) as income_by_month GROUP BY inhaberId, institution) as user_incomes GROUP BY institution, income_class HAVING count(*) > 10 ORDER BY institution, income_class",
        "timeout": 30,
        "expects": [["FIGO", 2500, 26], ["*", "*", 14]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT bucket(year2016.salary - year2015.salary by 100) as diff, count(*) FROM (SELECT     inhaberId,    SUM(betrag) as salary  FROM umsatz  WHERE     buchungsDatum >= '2016-01-01' and buchungsDatum < '2017-01-01' and    buchungstext ilike '%lohn%'  GROUP BY inhaberId) year2016 INNER JOIN (SELECT     inhaberId,    SUM(betrag) as salary  FROM umsatz  WHERE     buchungsDatum >= '2015-01-01' and buchungsDatum < '2016-01-01' and  buchungstext ilike '%lohn%' GROUP BY inhaberId) year2015 ON year2016.inhaberId = year2015.inhaberId GROUP BY diff",
        "timeout": 30,
        "expects": [[15700, 2], [36100, 21]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT year(buchungsDatum) as year, month(buchungsDatum) as month, AVG(betrag), STDDEV(betrag), MEDIAN(betrag) FROM umsatz WHERE buchungstext ILIKE '%lohn%' GROUP BY year, month HAVING avg(betrag) > 4000 ORDER BY year DESC, month DESC",
        "timeout": 30,
        "expects": [[2016, 5, 4105.808, 1193.055, 4593.319], [2016, 2, 5165.509, 559.889, 5250.0]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT EXTRACT_MATCHES(concat(concat(verwendungszweck, ' '), buchungstext), '\\w{4,}') as word, count(*) FROM umsatz WHERE verwendungszweck ILIKE '%zahlung%' GROUP BY word HAVING count(*) > 100 ORDER BY count(*) DESC LIMIT 10",
        "timeout": 30,
        "expects": [["477771", 127], ["Zahlung", 127]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT bucket(income by 200 align middle) AS income_class, avg(monthly_savings) FROM (SELECT expenses_by_month.inhaberId, median(monthly_income) AS income,  median(monthly_income) + median(monthly_expenses) AS monthly_savings FROM (SELECT   inhaberId, year(buchungsDatum) AS year, month(buchungsDatum) AS month, sum(betrag) AS monthly_income FROM umsatz WHERE betrag >= 0 AND betrag < 1000000000 GROUP BY inhaberId, year, month) AS income_by_month INNER JOIN (SELECT inhaberId, year(buchungsDatum) AS year, month(buchungsDatum) AS month, sum(betrag) AS monthly_expenses FROM umsatz WHERE betrag >= -1000000000 AND betrag < 0 GROUP BY inhaberId, year, month) AS expenses_by_month ON income_by_month.inhaberId = expenses_by_month.inhaberId AND  income_by_month.year = expenses_by_month.year AND income_by_month.month = expenses_by_month.month GROUP BY expenses_by_month.inhaberId) AS customer_incomes GROUP BY income_class",
        "timeout": 30,
        "expects": [[2500, -1162.195]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT extract_match(verwendungszweck, 'Aldi|Edeka|Rewe|IKEA|Amazon') as shop, bucket(income by 200 align middle) as income_class, count(*) FROM (SELECT inhaberId, median(monthly_income) as income FROM (SELECT inhaberId, left(cast(buchungsDatum as text), 7) as year_month, sum(betrag) as monthly_income FROM umsatz WHERE betrag >= 0 and betrag < 1000000000 GROUP BY inhaberId, year_month) as income_by_month GROUP BY inhaberId) customer_incomes INNER JOIN umsatz ON umsatz.inhaberId = customer_incomes.inhaberId GROUP BY income_class, shop HAVING count(*) > 3000 ORDER BY shop ASC, income_class ASC",
        "timeout": 30,
        "expects": [[null, 2500, 3832]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT left(cast(buchungsDatum as text), 7) as month, extract_match(verwendungszweck, 'Aldi|Edeka|Rewe|Amazon|IKEA') as shop, avg(betrag), min(betrag), max(betrag), count(*) FROM umsatz GROUP BY month, shop HAVING avg(betrag) > 400 ORDER BY month desc, shop asc",
        "timeout": 30,
        "expects": [["2016-05", null, 456.385, -753.2, 5250.0, 391], ["2016-02", null, 651.323, -1200, 5250.0, 1345]]
      },
      {
        "datasources": ["aircloak/teambank_konto_service@acmongo"],
        "query": "SELECT bucket(income by 200 align middle) as income_class, count(*) FROM (SELECT inhaberId, median(monthly_income) as income FROM (SELECT inhaberId, left(cast(buchungsDatum as text), 7) as year_month, sum(betrag) as monthly_income FROM umsatz WHERE betrag >= 0 and betrag < 1000000000 GROUP BY inhaberId, year_month) as income_by_month GROUP BY inhaberId) as user_incomes GROUP BY income_class",
        "timeout": 30,
        "expects": [[300, 7], [2500, 26]]
      }
    ],
    "games and players": [
      {
        "datasources": [
          "newcloak/newcloak-odbc-postgresql@airdb.mpi-sws.org",
          "newcloak/newcloak@acmysql.mpi-sws.org",
          "newcloak/newcloak-games-and-players@airdb.mpi-sws.org"
        ],
        "query": "SELECT winpoints, COUNT(firstname) FROM players JOIN games ON players.uid = games.player WHERE firstname = 'Ryker' GROUP BY winpoints ORDER BY winpoints",
        "timeout": 30,
        "expects": [[55, 2], [56, 3], [60, 4], [61, 4], [62, 3], [63, 7], [64, 3], [65, 2], [66, 2], [70, 2], ["*", 23]]
      },
      {
        "datasources": [
          "newcloak/newcloak-odbc-postgresql@airdb.mpi-sws.org",
          "newcloak/newcloak@acmysql.mpi-sws.org",
          "newcloak/newcloak-games-and-players@airdb.mpi-sws.org"
        ],
        "query": "SELECT SUM(winpoints) FROM players INNER JOIN games ON players.uid = games.player WHERE age > 0 and age < 18",
        "timeout": 30,
        "expects": [[52807]]
      },
      {
        "datasources": [
          "newcloak/newcloak-odbc-postgresql@airdb.mpi-sws.org",
          "newcloak/newcloak@acmysql.mpi-sws.org",
          "newcloak/newcloak-games-and-players@airdb.mpi-sws.org"
        ],
        "query": "SELECT AVG(count) FROM (SELECT player, count(*) AS count FROM games GROUP BY player) AS t",
        "timeout": 30,
        "expects": [[10.514]]
      },
      {
        "datasources": [
          "newcloak/newcloak-odbc-postgresql@airdb.mpi-sws.org",
          "newcloak/newcloak@acmysql.mpi-sws.org",
          "newcloak/newcloak-games-and-players@airdb.mpi-sws.org"
        ],
        "query": "SELECT firstname FROM players WHERE firstname = 'abc \\''~!@#{$1%^&1*(){}[]_+-=?/\\<>\b\",.:;\t 123'",
        "timeout": 30,
        "expects": []
      },
      {
        "datasources": [
          "newcloak/newcloak-odbc-postgresql@airdb.mpi-sws.org",
          "newcloak/newcloak@acmysql.mpi-sws.org",
          "newcloak/newcloak-games-and-players@airdb.mpi-sws.org"
        ],
        "query": "SELECT winpoints, COUNT(*) FROM players JOIN games ON players.uid = games.player GROUP BY winpoints HAVING COUNT(*) BETWEEN 100 AND 300 ORDER BY winpoints LIMIT 2",
        "timeout": 30,
        "expects": [[50, 199], [79, 228]]
      },
      {
        "datasources": [
          "newcloak/newcloak-odbc-postgresql@airdb.mpi-sws.org",
          "newcloak/newcloak@acmysql.mpi-sws.org",
          "newcloak/newcloak-games-and-players@airdb.mpi-sws.org"
        ],
        "query": "SELECT MEDIAN(level) FROM (SELECT uid, level FROM players ORDER BY level DESC LIMIT 25 OFFSET 5) AS t",
        "timeout": 30,
        "expects": [[10]]
      }
    ],
    "nyctaxi": [
      {
        "datasources": ["nyctaxi/nyctaxi@stage-airdb.mpi-sws.org"],
        "query": "SELECT COUNT(trip_time_in_secs), AVG(trip_time_in_secs), STDDEV(trip_time_in_secs) FROM trips WHERE passenger_count >= 8 and passenger_count < 10",
        "timeout": 30,
        "expects": [[36, 262.127, 488.521]]
      },
      {
        "datasources": ["nyctaxi/nyctaxi@stage-airdb.mpi-sws.org"],
        "query": "SELECT passenger_count AS pc, COUNT(*) FROM trips WHERE passenger_count IN (7,8,9,10) GROUP BY pc ORDER BY pc",
        "timeout": 30,
        "expects": [[7, 26], [8, 19], [9, 16]]
      },
      {
        "datasources": ["nyctaxi/nyctaxi@stage-airdb.mpi-sws.org"],
        "query": "SELECT COUNT(DISTINCT passenger_count) FROM trips WHERE trip_time_in_secs > 5000 and trip_time_in_secs < 10000",
        "timeout": 600,
        "expects": [[11]]
      },
      {
        "datasources": ["nyctaxi/nyctaxi@stage-airdb.mpi-sws.org"],
        "query": "SELECT COUNT(*) FROM trips WHERE trip_time_in_secs > 2500 and trip_time_in_secs < 5000 AND passenger_count <> 4",
        "timeout": 900,
        "expects": [[2721255]]
      },
      {
        "datasources": ["nyctaxi/nyctaxi@stage-airdb.mpi-sws.org"],
        "query": "SELECT MIN(passenger_count), MAX(passenger_count), MEDIAN(passenger_count), SUM(passenger_count) FROM trips WHERE trip_time_in_secs >= 0 and trip_time_in_secs < 50",
        "timeout": 900,
        "expects": [[0, 9, 1, 1343357]]
      }
    ],
    "medical database": [
      {
        "datasources": ["aircloak1/Kia_Clinic@srv-51-42.mpi-sws.org"],
        "query": "SELECT COUNT(*) FROM patients",
        "timeout": 30,
        "expects": [[11253]]
      },
      {
        "datasources": ["aircloak1/Kia_Clinic@srv-51-42.mpi-sws.org"],
        "query": "SELECT firstname FROM patients WHERE firstname = 'abc \\''~!@#{$1%^&1*(){}[]_+-=?/\\<>\b\",.:;\t 123'",
        "timeout": 30,
        "expects": []
      }
    ]
  },
  "cloaks": [
    {
      "url": "nightly-air.aircloak.com",
      "token": "SFMyNTY.g3QAAAACZAAEZGF0YW0AAAAkNGFiMDc5YTctYjM1ZS00NDgyLWFlZjAtNzRhMmY2ZTM3MmZlZAAGc2lnbmVkbgYAab6qmVcB.T_j5M5Kix3k2wLo8qefhC9EcqQ0UEddkjbpOpvD5zY0",
      "tests": ["teambank", "games and players", "nyctaxi", "medical database"],
      "load_testing": {
        "datasource": "nyctaxi/nyctaxi@stage-airdb.mpi-sws.org",
        "queries": [
          "SELECT COUNT(DISTINCT trip_time_in_secs), MEDIAN(trip_time_in_secs) FROM trips",
          "SELECT MAX(trip_distance), MEDIAN(trip_distance) FROM trips",
          "SELECT COUNT(*), AVG(passenger_count), STDDEV(passenger_count), MEDIAN(passenger_count) FROM trips"
        ],
        "timeout": 5400
      }
    }
  ]
}
